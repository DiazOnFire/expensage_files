# -*- coding: utf-8 -*-
"""categorizerr.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pcedTfpUaA--Sshu5pppUS4YFzRuj1D1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import files
 
 
uploaded = files.upload()

df=pd.read_csv('finaldataset.csv')
df.head()

#cleaning up stuff
df.drop(['Unnamed: 0'],axis=1,inplace=True)
df.head()

df['Categories'].value_counts()

df.Categories.replace(to_replace=['None'],value=np.nan,inplace=True)

df.dropna(inplace=True)

X=df['product']
y=df['Categories']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC

model = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC())])

model.fit(X_train, y_train)

prediction1 = model.predict(X_test)
from sklearn.metrics import accuracy_score

print(accuracy_score(y_test, prediction1))

model_new = Pipeline([('tfidf', TfidfVectorizer(max_df=0.25,
                                               max_features=50000,
                                              ngram_range=(1,2))),
                     ('clf', LinearSVC(random_state=42))
                    ])
model_new.fit(X_train, y_train)

prediction2 = model_new.predict(X_test)

from sklearn.model_selection import GridSearchCV

#model for doing GridSearch
modelsearch = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LinearSVC(random_state=42))])

parameters = [{
    'tfidf__max_df': (0.25, 0.5, 0.75),
    'tfidf__max_features': (None, 5000, 10000, 50000),
    'tfidf__ngram_range': [(1, 1), (1, 2), (1, 3)]
},{
    'clf__C': [0.00001, 0.0001, 0.0005],
    'clf__dual': (True, False)
}]

grid_search = GridSearchCV(estimator=modelsearch, param_grid=parameters, verbose=1, n_jobs=-1, cv=4)

grid_search.fit(X_train,y_train)

grid_search.best_score_

grid_search.best_params_

model_final = Pipeline([('tfidf', TfidfVectorizer(max_df=0.25,
                                               max_features=None,
                                              ngram_range=(1,2))),
                     ('clf', LinearSVC(random_state=52))
                    ])

model_final.fit(X_train, y_train)

prediction2 = model_final.predict(X_test)

from sklearn.metrics import accuracy_score

print(accuracy_score(y_test, prediction2))

"""model_final is our final model which will categorize items, we shall use this in main.py where the model will be explicitly called."""



#res=prediction2.to_json(orient="columns")
#parsed=loads(res)
#xx=dumps(parsed,indent=5)

tester=pd.DataFrame(data=['Mexicana Fries','Malai Tikka Roll','Buffalo wings','Gucci Boots','Potatoes'],columns=['items'])

tester.head()

tester['cats']='NaN'
tester.head()

tester['cats']=model_final.predict(tester['items'])

tester.head()

import pickle
pickle.dump(model_final,open('modelfinal.pkl','wb'))


